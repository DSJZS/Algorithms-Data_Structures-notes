1.算法的定义
	对特定问题求解方法和步骤的一种描述，它是指令的有限序列。其中每个指令表示一个或多个操作。
	简而言之，算法就是解决问题的方法与步骤

2.算法的描述
	自然语言：中文、英文等
	流程图：传统流程图、NS流程图
	伪代码：类语言：类C语言
	程序代码：C语言程序、JAVA语言程序

3.算法与程序
	·算法是解决问题的一种方法或一个过程，考虑如何将输入转换成输出，一个问题可以有多种算法。
	·程序是用某种程序设计语言对算法的具体实现。
程序=数据结构＋算法
数据结构通过算法实现操作
算法根据数据结构设计程序

4.算法特性
一个算法必须具备以下五个重要特性
	·有穷性：一个算法必须总是在执行有穷步之后结束，且每一步都在有穷时间内完成。
	·确定性：算法中的每一条指令必须有确切的含义，没有二义性，在任何条件下，只有唯一的一条执行路径，即对于相同的输入只能得到相同的输出。
	·可行性：算法是可执行的，算法描述的操作可以通过已经实现的基本操作执行有限次来实现。
	·输入：一个算法有零个或多个输入。
	·输出：一个算法有一个或多个输出。

5.算法设计要求
	·正确性：通常认为如果程序对于精心选择的、典型、苛刻且带有刁难性的几组输入数据能够得出满足要求的结果，那么它是合格的
	·可读性：一方面，算法应易于人的理解；另一方面算法应简洁、方便寻找隐藏的错误以易于调试
	·健壮性(鲁棒性)：1、指当输入非法数据时，算法恰当的做出反应或应处理，而不是产生莫名其妙的输出结果。
			2、处理出错的方法，不应是中断程序的执行，而应是返回一个表示错误或错误性质的值，以便在更高的抽象层次上进行处理
	·高效性：要求花费尽量少的时间(时间效率)和尽量低的存储空间要求(空间效率)，时间效率和空间效率有时是冲突的，因此需要根据实际情况进行取舍
一个好的算法首先要满足 正确性、可读性、健壮性，在此基础上通过算法的效率来判断

6.算法时间效率的度量
·算法时间效率可以用依据该算法编制的程序在计算机上执行所消耗的时间来度量。
两种度量方法：
①事后分析：将算法实现、测量其时间和空间开销
	缺点:编写程序实现算法将花费较多的时间和精力;所得实验结果依赖于计算机的软硬件等环境因素，掩盖算法本身的优劣
②事前分析：对算法所消耗资源的一种估算方法
 ·事前分析方法:一个算法的运行时间是指一个算法在计算机上运行所耗费的时间大致可以等于计算机执行一种简单的操作（如赋值、比较、移动等)所需的时间与算法中进行的简单操作次数乘积。
		因此		算法运行时间 = 一个简单操作所需的时间 × 简单操作次数
		或		算法运行时间 = ∑(  每条语句的执行次数(语句频度) × 该语句执行一次所需的时间  )
	每条语句执行一次所需的时间，一般是随机器而异的。取决于机器的指令性能、速度以及编译的代码质量。是由机器本身软硬件环境决定的,它与算法无关。
	所以，我们可假设执行每条语句所需的时间均为单位时间。此时对算法的运行时间的讨论就可转化为讨论该算法中所有语句的执行次数，即频度之和了。
	排除机器性能带来的区别，把算法所耗费的时间定义为该算法中每条语句的频度之和
	但这种算法过于麻烦，我们有更好的方法计算算法所耗费的时间————仅比较算法间的数量级，数量级越大越不好
若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(h)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n)),称O(f(n))为算法的渐进时间复杂度(O是数
量级的符号)，简称时间复杂度。
如	T(n) = 2n³ + 3n² + 2n +1
当n->∞时，T(n) / n³ -> 2 ,这表示n充分大时， T(n)与 n³ 是同阶或同数量级，引入大"O"记号，则 T(n)可记作 T(n) = O( n³ )
算法中基本语句重复执行的次数是问题规模n的某个函数f(n)，具法的时间量度记作:T(n)=O(f(n))
它表示随着n的增大，算法执行的时间的增长率和f(n)的增长率相同，称渐近时间复杂度。
基本语句：
	算法中重复执行次数和算法的执行时间成正比的语句
	对算法运行时间的贡献最大
	执行次数最多
问题规模：
	n越大算法的执行时间越长
	排序: 	n为记录数
	矩阵:	n为矩阵的阶数
	多项式:	n为多项式的项数
	集合:	n为元素个数
	树: 	n为树的结点个数
	图: 	n为图的顶点数或边数
总结，求渐进时间复杂度(时间复杂度)的方法如下：
	1．找出语句频度最大的那条语句作为基本语句 (直接找嵌套循环最深层的语句)
	2. 计算基本语句的频度得到问题规模n的某个函数f(n)
	3．取其数量级用符号“O”表示
